# -*- coding: utf-8 -*-
import datetime, urllib, os

from datetime import timedelta, date
from HTMLParser import HTMLParser

# create a subclass and override the handler methods
# this class parses through HTML code and picks out the links
class MyHTMLParser(HTMLParser):
  def __init__(self):
    HTMLParser.__init__(self)
    self.data = 0
    
  def handle_starttag(self, tag, attrs):
    if tag == 'a':
        for name, value in attrs:
            if (name=="href" and value.count('/')==5): #&& "/lkml/20" not in somestring:
                reverse = value[::-1]
                myNumberReversed = reverse[0:reverse.index('/', 0)]
                myNumber = int(myNumberReversed[::-1])
                if (myNumber>self.data):
                    self.data=myNumber
  
#opens the url and grabs the html code
print "Start Time: " + str(datetime.datetime.now())
sYear = raw_input('Start Year:')
sMonth = raw_input('Start Month:')
sDay = raw_input('Start Day:')

eYear = raw_input('End Year:')
eMonth = raw_input('End Month:')
eDay = raw_input('End Day:')

eDate = date(int(eYear),int(eMonth),int(eDay))
sDate = date(int(sYear),int(sMonth),int(sDay))

eDate = eDate + timedelta(days=1)

#creates an id for the emails being stored
id = -1;

try:
    idPath = "C:/Users/dschneider2/Desktop/honors/" + sYear
    os.makedirs(idPath)
    id = 1
    f = open(idPath + "/currentId" + '.txt','w')
    f.write(str(id))
    f.close()
except OSError:
    f = open(idPath + "/currentId" + '.txt','r')
    id = long(f.read())
    pass


#Goes through each date from the start date entered to the end date and finds all messages associated with that date
while (sDate.year!=eDate.year or sDate.month!=eDate.month or sDate.day!=eDate.day):
    path = "C:/Users/dschneider2/Desktop/honors/" + str(sDate.year) + "/" + str(sDate.month) + sDate.strftime("%B") + "/" + str(sDate.day)
    try:
        os.makedirs(path)
    except OSError:
        pass
    sock = urllib.urlopen("https://lkml.org/lkml/"+str(sDate.year)+"/"+str(sDate.month)+"/"+str(sDate.day))
    htmlSource = sock.read() 
    sock.close()  
    parser = MyHTMLParser()
    parser.feed(htmlSource)
    myUrl = "https://lkml.org/lkml/"+str(sDate.year)+"/"+str(sDate.month)+"/"+str(sDate.day) + "/"
    print "NEW DAY" + myUrl
    for x in range(1, (parser.data)+1):
        print myUrl +str(x)
        sock = urllib.urlopen(myUrl + str(x))
        f = open(path + "/" + str(sDate.year) + str(id)+ '.txt','w')
        myUrl = "https://lkml.org/lkml/"+str(sDate.year)+"/"+str(sDate.month)+"/"+str(sDate.day) + "/" + str(x)
        f.write(myUrl)
        htmlSource = sock.read()
        f.write(myUrl+'\n\n'+htmlSource+'-------------------------------------------------------\n\n\n') 
        f.close()
        id=id+1;
        f = open(idPath + "/currentId" + '.txt','w')
        f.write(str(id))
        f.close()
    sDate = sDate + timedelta(days=1)

print "End Time: " + str(datetime.datetime.now())
